@page "/"
@attribute [Authorize]

@using Microsoft.FluentUI.AspNetCore.Components
@using Recipes.Web.Items.Cards
@using Recipes.Web.Items.Form
@using Recipes.Web.Models

@inject IUserService UserService
@inject IRecipesService RecipeService
@inject IDialogService DialogService

<PageTitle>Recipes</PageTitle>

@if (Loading)
{
    <p>Loading your recipes...</p>
}
else
{
    <FluentStack Orientation="Orientation.Vertical">
        <FluentButton IconStart="@(new Icons.Regular.Size16.Add())" Appearance="Appearance.Accent" OnClick="@OpenRecipeFormDialogAsync">Create a new recipe</FluentButton>

        <RecipeCardsStack Recipes="@RecipesCollection" />
    </FluentStack>
}

@code {
    public IEnumerable<RecipeResponse> RecipesCollection = new List<RecipeResponse>();
    public bool Loading = true;

    private DialogParameters _dialogParameters = new()
    {
        Title = $"Create a new recipe",
        PrimaryAction = "Create",
        PrimaryActionEnabled = true,
        SecondaryAction = "Cancel",
        Width = "500px",
        TrapFocus = true,
        Modal = true,
        PreventScroll = true
    };

    RecipeForm Recipe = new()
    {
        Name = string.Empty,
        Description = string.Empty
    };

    protected override async Task OnInitializedAsync()
    {
        await UserService.LoadUserDetails();
        RecipesCollection = await RecipeService.GetRecipes();
        Loading = false;
    }

    public async Task OpenRecipeFormDialogAsync()
    {
        var dialog = await DialogService.ShowDialogAsync<RecipeFormDialog>(Recipe, _dialogParameters);
        var result = await dialog.Result;

        @if (result.Data is not null)
        {
            RecipeForm? recipe = result.Data as RecipeForm;

            var newRecipe = new RecipeResponse()
            {
                Name = recipe?.Name ?? string.Empty,
                Description = recipe?.Description ?? string.Empty
            };

            await RecipeService.CreateRecipe(newRecipe);

            RecipesCollection = RecipesCollection.Append(newRecipe).ToList();
        }

        Clear();
    }

    public void Clear()
    {
        Recipe.Name = string.Empty;
        Recipe.Description = string.Empty;
    }
}